language: c
dist: trusty
# Run builds with 2 different values of the `nim_branch` environment variable
env:
  - nim_branch=master
  - nim_branch=devel
# Run builds with 2 different choices of a C compiler
compiler:
  - gcc
  - clang
# This meams we get a 2x2 build matrix, with a total of 4 builds
matrix:
  # It's OK if our project fails to build with Nim devel, but we still want to check it
  allow_failures:
    - env: nim_branch=devel
before_install:
  - |
    # Test the master branch with Nim master and other branches with Nim devel
    if [ "$TRAVIS_BRANCH" = master ]; then
        export branch=master
    else
        export branch=devel
    fi
    sudo apt-get update -y
    sudo apt-get install libpcre3 libpcre3-dev -y
install:
  - |
    if [ ! -x nim-$branch/bin/nim ]; then
      # If the Nim executable does not exist (means we haven't installed Nim yet)
      # (do what we did before)
      git clone -b $branch --depth 1 git://github.com/nim-lang/nim nim-$branch/
      cd nim-$branch
      git clone -b $branch --depth 1 git://github.com/nim-lang/csources csources/
      cd csources
      sh build.sh
      cd ..
      rm -rf csources
      bin/nim c koch
      ./koch boot -d:release
    else
      # We already have the repository, go to it
      cd nim-$branch
      # Download latest commits from the repository
      git fetch origin
      if ! git merge FETCH_HEAD | grep "Already up-to-date"; then
        # Recompile Nim (using itself), only if there were new changes
        bin/nim c koch
        ./koch boot -d:release
      fi
    fi
    cd ..
    # export nim
    export PATH="nim-$branch/bin:$PATH"
    git clone --depth 1 https://github.com/nim-lang/nimble.git nimble/
    mkdir lib
    nim c -r nimble/src/nimble install <<< y

script: nim c --run ./tests/test.nim

cache:
  directories:
    - nim-master
    - nim-devel
    - nimble

branches:
  except:
    - gh-pages